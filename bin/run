#!/usr/bin/env bash

# Process CLI
process_cli(){
  if [[ -z $1 ]]; then usage; fi

  local cmd
  cmd="${1:-}"

  case "$cmd" in
    build)
      docker pull "${DISTRIBUTION}:${VERSION}"
      docker build --no-cache --rm --file="tests/Dockerfile.${DISTRIBUTION}-${VERSION}" --tag="${DISTRIBUTION}-${VERSION}:ansible" tests
      ;;
    test)
      CONTAINER_ID=$(docker run --detach --privileged -v /sys/fs/cgroup:/sys/fs/cgroup:ro --volume="${PWD}:/ansible" "${DISTRIBUTION}-${VERSION}:ansible")
      docker exec -w /ansible "${CONTAINER_ID}" env ANSIBLE_FORCE_COLOR=1 ansible-galaxy install --roles-path roles/galaxy --role-file roles/requirements.yml
      docker exec -w /ansible "${CONTAINER_ID}" env ANSIBLE_FORCE_COLOR=1 ansible-playbook --verbose --inventory tests/inventory tests/test.yml --syntax-check
      docker exec -w /ansible "${CONTAINER_ID}" env ANSIBLE_RETRY_FILES_ENABLED=false ANSIBLE_FORCE_COLOR=1 ansible-playbook --verbose --inventory tests/inventory tests/test.yml
      if docker exec -w /ansible "${CONTAINER_ID}" env ANSIBLE_RETRY_FILES_ENABLED=false ANSIBLE_FORCE_COLOR=1 ansible-playbook --verbose --inventory tests/inventory tests/test.yml | grep -q 'changed=0.*failed=0'; then
        echo 'Idempotence test: pass' && exit 0
      else
        echo 'Idempotence test: fail' && exit 1
      fi
      docker rm -f "${CONTAINER_ID}" || true
      ;;
    deploy)
      ANSIBLE_FORCE_COLOR=1 ansible-galaxy install --roles-path roles/galaxy --role-file roles/requirements.yml
      ANSIBLE_RETRY_FILES_ENABLED=false ANSIBLE_FORCE_COLOR=1 ansible-playbook -i production site.yml
      ;;
    *)
      usage
      ;;
  esac
}

process_cli "${@:-}"
