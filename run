#!/usr/bin/env bash
# Ansible

# Usage
usage(){
  echo '---------------------------------------------'
  echo "USAGE: ${BASH_SOURCE[0]} [COMMAND] [OPTIONS]"
  echo '---------------------------------------------'
  echo ''
  echo 'Commands:'
  echo ''
  echo '  - build'
  echo ''
  echo '  - test'
  echo ''
  echo '  - deploy'
  echo ''
  echo '----------------------------------------------'
  echo 'For more information please consult the README'
  echo '----------------------------------------------'
  exit 1
}

# Bash strict mode
set -euo pipefail
IFS=$'\n\t'

# Debug
[ -z "${DEBUG:-}" ] || set -x

# System VARs
NOW="$(date +"%Y%m%d_%H%M%S")"
TMPDIR=$(mktemp -d 2>/dev/null || mktemp -d -t 'tmp')
APPDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd -P)"
VERSION=$(git --git-dir="${APPDIR}/.git" --work-tree="${APPDIR}" describe --always --tags)
export NOW TMPDIR APPDIR VERSION

# Output
e_ok()    { printf "  ✔  %s\\n" "$@" ;}
e_info()  { printf "  ➜  %s\\n" "$@" ;}
e_error() { printf "  ✖  %s\\n" "$@" ;}
e_warn()  { printf "    %s\\n" "$@" ;}
e_abort() { e_error "$1"; return "${2:-1}" ;}

# Clean-up
clean_up() {
  if [[ "${CI:-false}" == 'true' ]]; then
    if [[ -s "${APPDIR}/.env" ]]; then
      e_info 'Removing .env'
      shred -fu "${APPDIR:?}/.env"
    fi
  fi
}

# Process CLI
process_cli(){
  trap 'clean_up' EXIT HUP INT QUIT TERM
  if [[ -z $1 ]]; then usage; fi

  local cmd
  cmd="${1:-}"; shift || true

  case "$cmd" in
    build)
      docker pull "${DISTRIBUTION}:${CODENAME}"
      docker build --no-cache --rm --file="tests/Dockerfile.${DISTRIBUTION}-${CODENAME}" --tag="${DISTRIBUTION}-${CODENAME}:ansible" tests
      ;;
    test)
      CONTAINER_ID=$(docker run --detach --privileged -v /sys/fs/cgroup:/sys/fs/cgroup:ro --volume="${PWD}:/ansible" "${DISTRIBUTION}-${CODENAME}:ansible")
      docker exec -w /ansible "${CONTAINER_ID}" env ANSIBLE_FORCE_COLOR=1 ansible-galaxy install --roles-path roles/galaxy --role-file roles/requirements.yml
      docker exec -w /ansible "${CONTAINER_ID}" env ANSIBLE_FORCE_COLOR=1 ansible-playbook --verbose --inventory tests/inventory tests/test.yml --syntax-check
      docker exec -w /ansible "${CONTAINER_ID}" env ANSIBLE_RETRY_FILES_ENABLED=false ANSIBLE_FORCE_COLOR=1 ansible-playbook --verbose --inventory tests/inventory tests/test.yml
      if docker exec -w /ansible "${CONTAINER_ID}" env ANSIBLE_RETRY_FILES_ENABLED=false ANSIBLE_FORCE_COLOR=1 ansible-playbook --verbose --inventory tests/inventory tests/test.yml | grep -q 'changed=0.*failed=0'; then
        echo 'Idempotence test: pass' && exit 0
      else
        echo 'Idempotence test: fail' && exit 1
      fi
      docker rm -f "${CONTAINER_ID}" || true
      ;;
    deploy)
      ANSIBLE_FORCE_COLOR=1 ansible-galaxy install --roles-path roles/galaxy --role-file roles/requirements.yml
      ANSIBLE_RETRY_FILES_ENABLED=false ANSIBLE_FORCE_COLOR=1 ansible-playbook -i production site.yml
      ;;
    *)
      usage
      ;;
  esac
}

process_cli "${@:-}"
